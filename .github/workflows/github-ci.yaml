name: Publish Chrome Extension

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Obtain Access Token
        id: get-token
        run: |
          JSON_TOKEN=$(curl -s -X POST -d "client_id=${{ secrets.CHROME_CLIENT_ID }}&client_secret=${{ secrets.CHROME_CLIENT_SECRET }}&refresh_token=${{ secrets.CHROME_REFRESH_TOKEN }}&grant_type=refresh_token" https://oauth2.googleapis.com/token)
          echo $JSON_TOKEN
          ACCESS_TOKEN=$(echo $JSON_TOKEN | jq -r 'access_token')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Get Extension Version
        id: get-extension-version
        run: |
          EXTENSION_ID=${{ secrets.CHROME_EXTENSION_ID }}
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
            "https://www.googleapis.com/chromewebstore/v1.1/items/$EXTENSION_ID")
          VERSION=$(echo $RESPONSE | jq -r '.version')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extension version: $VERSION"

      - name: Check Version Update
        id: check-version
        run: |
          version_gt() {
            # Compare two versions passed as arguments.
            # Returns 0 (true) if $1 > $2
            # Returns 1 (false) otherwise
            [ "$1" = "$2" ] && return 1
            local IFS=.
            local i ver1=($1) ver2=($2)
            # Fill empty fields in ver1 with zeros
            for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
                ver1[i]=0
            done
            # Compare version numbers
            for ((i=0; i<${#ver1[@]}; i++)); do
                if [[ -z ${ver2[i]} ]]; then
                    ver2[i]=0
                fi
                if ((10#${ver1[i]} > 10#${ver2[i]})); then
                    return 0
                fi
                if ((10#${ver1[i]} < 10#${ver2[i]})); then
                    return 1
                fi
            done
            return 1
          }

          # Extract previous and current versions
          git show HEAD~1:manifest.json | jq -r '.version' > prev_version.txt
          jq -r '.version' < manifest.json > curr_version.txt

          prev_version=$(cat prev_version.txt)
          curr_version=$(cat curr_version.txt)
          echo "Previous version: $prev_version"
          echo "Current version: $curr_version"
          if version_gt "$curr_version" "$prev_version"; then
            echo "Version has been updated. Proceeding with publishing."
          else
            echo "The version in manifest.json is not greater than the previous version."
            exit 1
          fi

      - name: Zip Extension
        run: |
          mkdir -p build
          zip -r build/extension.zip . -x ".git/*" ".github/*"

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: extension-zip
          path: build/extension.zip

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: extension-zip
          path: build

      - name: Publish to Chrome Web Store
        uses: trmcnvn/chrome-addon@v2
        with:
          extension: ${{ secrets.CHROME_EXTENSION_ID }}
          zip: build/extension1.zip
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
